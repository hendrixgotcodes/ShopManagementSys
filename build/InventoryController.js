/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./controller/InventoryController.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./controller/Alerts/NotificationController.js":
/*!*****************************************************!*\
  !*** ./controller/Alerts/NotificationController.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/***********AUDIO FILES*********/\nconst winAlert = new Audio('../../utils/media/syssounds/win10.mp3');\n/**********DOM ELEMENTS*********/\n\nconst notification_banner = document.querySelector('.notification_banner');\n\nclass Notifications {\n  static showNotification(message, boolean) {\n    notification_banner.querySelector('span').innerText = message;\n    notification_banner.style.transform = \"translateX(0%)\";\n\n    if (boolean === true) {\n      notification_banner.querySelector('.banner_arrow').classList.add(\"banner_arrow--show\");\n      console.log(true);\n    }\n\n    winAlert.play();\n    setTimeout(() => {\n      Notifications.hideNotification();\n\n      if (notification_banner.querySelector('.banner_arrow').classList.contains('banner_arrow--show')) {\n        notification_banner.querySelector('.banner_arrow').classList.remove(\"banner_arrow--show\");\n      }\n    }, 5000);\n  }\n\n  static hideNotification() {\n    notification_banner.style.transform = \"translateX(100%)\";\n  }\n\n  static showAlert(type, message) {\n    const mainBodyContent = document.querySelector(\".mainBody_content\");\n    type = type.toLowerCase();\n    let bGColor;\n\n    switch (type) {\n      case 'success':\n        bGColor = \"#12A89D\";\n        break;\n\n      case 'warning':\n        bGColor = \"#E17C38\";\n        break;\n\n      case 'error':\n        bGColor = \" #ce2727\";\n        break;\n\n      default:\n        bGColor = \"#12A89D\";\n    }\n\n    let alertTemplate = `\n            <img class=\"img_close\" src=\"../Icons/Modals/closeWhite.svg\" alt=\"Close Modal\" />\n            <div class=\"alertContent\">\n                ${message}\n            </div>\n        `;\n    let alert = document.createElement(\"div\");\n    alert.innerHTML = alertTemplate;\n    alert.className = \"alertBanner\";\n    alert.style.backgroundColor = bGColor;\n    (function Animate() {\n      return new Promise((resolve, reject) => {\n        mainBodyContent.appendChild(alert);\n        resolve();\n      });\n    })().then(() => {\n      setTimeout(() => {\n        mainBodyContent.querySelector(\".alertBanner\").classList.add(\"alertBanner--shown\");\n      }, 300); //Automatically remove after three seconds\n\n      setTimeout(() => {\n        (function Animate() {\n          return new Promise((resolve, reject) => {\n            mainBodyContent.querySelector(\".alertBanner\").classList.remove(\"alertBanner--shown\"); // function will resolve after animation is document (animation takes .5s, function resolves after .6s)\n\n            setTimeout(() => {\n              resolve();\n            }, 600);\n          });\n        })().then(() => {\n          //Removing alertbanner from DOM to increase performance\n          mainBodyContent.querySelector(\".alertBanner\").remove();\n        });\n      }, 5000);\n    });\n  }\n\n}\n\nmodule.exports = Notifications;\n\n//# sourceURL=webpack:///./controller/Alerts/NotificationController.js?");

/***/ }),

/***/ "./controller/InventoryController.js":
/*!*******************************************!*\
  !*** ./controller/InventoryController.js ***!
  \*******************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _controller_modals_ModalController__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../controller/modals/ModalController */ \"./controller/modals/ModalController.js\");\n/* harmony import */ var _Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Alerts/NotificationController */ \"./controller/Alerts/NotificationController.js\");\n/* harmony import */ var _Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _utilities_TableController__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities/TableController */ \"./controller/utilities/TableController.js\");\n/* harmony import */ var _utilities_TableController__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(_utilities_TableController__WEBPACK_IMPORTED_MODULE_2__);\n\n/************IMPORT******/\n\n\n\n // const Modal = require('../controller/modals/ModalController')\n\n/************DOM ELEMENTS */\n\nconst toolBar_btn = document.querySelector('.toolBar_btn--alpha');\nconst toolBar_btn_icon = document.querySelector('.ico_btn_add');\nconst tableROWS = document.querySelector('.tableBody').querySelectorAll('.bodyRow');\nconst btnAdd = document.querySelector(\".btn_add\");\nconst btnEdit = document.querySelector(\".btn_edit\");\nconst btnDelete = document.querySelector(\".btn_delete\");\nconst rowBucket = [];\n/**********************EVENT LISTENERS *************************/\n\ntoolBar_btn.addEventListener('mouseover', toggleTBbtn_white);\ntoolBar_btn.addEventListener('mouseleave', toggleTBbtn_default); //Right Click event lister for each row\n\ntableROWS.forEach(row => {\n  row.addEventListener(\"contextmenu\", e => {\n    showRowControls(row);\n  });\n}); //.del button in \"Control\" box of every row\n\ntableROWS.forEach(row => {\n  row.querySelector(\".controls\").querySelector(\".del\").addEventListener(\"click\", () => {\n    deleteItem(row);\n  });\n}); //.edit button in \"Control\" box of every row\n\ntableROWS.forEach(row => {\n  row.querySelector(\".controls\").querySelector(\".edit\").addEventListener(\"click\", () => {\n    editItem(row);\n  });\n}); //\n\ntableROWS.forEach(row => {\n  // row.querySelector(\".td_cb\").querySelector(\".selectOne\").addEventListener(\"click\", ()=>{\n  //     checkCB(row);\n  // });\n  row.addEventListener(\"click\", () => {\n    checkCB(row);\n  }); // row.querySelector(\".td_Names\").addEventListener(\"click\", ()=>{\n  //     checkCB(row);\n  // });\n  // row.querySelector(\".td_Brands\").addEventListener(\"click\", ()=>{\n  //     checkCB(row);\n  // });\n  // row.querySelector(\".td_Category\").addEventListener(\"click\", ()=>{\n  //     checkCB(row);\n  // });\n  // row.querySelector(\".td_Stock\").addEventListener(\"click\", ()=>{\n  //     checkCB(row);\n  // });\n  // row.querySelector(\".td_Price\").addEventListener(\"click\", ()=>{\n  //     checkCB(row);\n  // });\n}); //For btnAdd(Add button in Inventory toolbar)\n\nbtnAdd.addEventListener(\"click\", addItem); //For btnEdit (Edit button in Inventory )\n\nbtnEdit.addEventListener(\"click\", editMultiple);\n/*****************************************************FUNCTIONS***************************************************/\n//---------------------------------------------------------------------------------------------------------------\n// Two functions responsible for changing the icon in the \"Add button\" in the Inventory toolbar\n\nfunction toggleTBbtn_white() {\n  toolBar_btn_icon.setAttribute('src', '../Icons/toolBar/btnAdd.svg');\n}\n\nfunction toggleTBbtn_default() {\n  toolBar_btn_icon.setAttribute('src', '../Icons/toolBar/btnAdd--green.svg');\n} //---------------------------------------------------------------------------------------------------------------\n//Responsible for swiping table row to right - (Used by event listeners appended on each row in  Inventory)\n\n\nfunction showRowControls(row) {\n  if (row.classList.contains(\"controlShown\")) {\n    row.style.transform = \"translateX(0px)\";\n    row.classList.remove(\"controlShown\");\n  } else {\n    row.style.transform = \"translateX(15%)\";\n    row.classList.add(\"controlShown\");\n  }\n} //---------------------------------------------------------------------------------------------------------------\n//Function does not atually delete row(inventoryItem) but rather triggers the process and determines the result of the process through a promise.\n//And decide to show or not show an alert based on that result - (Used by event listeners on row \".del\" buttons in Inventory)\n\n\nfunction deleteItem(row) {\n  const itemName = row.querySelector(\".td_Names\").innerText;\n  const itemQuantity = row.querySelector(\".td_Stock\").innerText; // Opens a confirmation dialog box which returns a promise\n\n  _controller_modals_ModalController__WEBPACK_IMPORTED_MODULE_0__[\"default\"].openConfirmationBox(itemName, itemQuantity).then(result => {\n    if (result === \"removed\") {\n      _Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1___default.a.showAlert(\"warning\", `${itemName} Of Quantity ${itemQuantity} Has Been Removed From Database`);\n    }\n  }).catch(error => {\n    if (error === \"wrongPassword\") {\n      _Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1___default.a.showAlert(\"error\", `Incorrect Password, ${itemName} Not Deleted`);\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n//Function does not atually edit row(inventoryItem) but rather triggers the process and determines the result of the process through a promise.\n//And decide to show or not show an alert based on that result - (Used by event listeners on row \".edit\" buttons in Inventory)\n\n\nfunction editItem(row) {\n  const itemName = row.querySelector(\".td_Names\").innerText;\n  _controller_modals_ModalController__WEBPACK_IMPORTED_MODULE_0__[\"default\"].openItemForm(row, true).then(result => {\n    if (result[0] === \"edited\") {\n      _Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1___default.a.showAlert(\"success\", `${itemName} Has Been Successfully Changed To ${result[1]}`);\n    }\n  });\n}\n\nfunction addItem() {\n  _controller_modals_ModalController__WEBPACK_IMPORTED_MODULE_0__[\"default\"].openItemForm(\"\", false).then(result => {\n    if (result === \"edited\") {\n      _Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1___default.a.showAlert(\"success\", `${itemName} Has Been Edited Successfully`);\n    }\n  });\n} //---------------------------------------------------------------------------------------------------------------\n// Adds and removes shop items to rowBucket on checkbox tick and untick respectively\n\n\nfunction checkCB(row) {\n  const CB = row.querySelector(\".td_cb\").querySelector(\".selectOne\");\n\n  if (CB.checked !== true) {\n    rowBucket.push(row);\n    btnEdit.disabled = false;\n    btnDelete.disabled = false;\n    CB.checked = true;\n  } else {\n    rowBucket.forEach(element => {\n      if (element.querySelector(\".td_Names\").innerText === row.querySelector(\".td_Names\").innerText) {\n        let index = rowBucket.indexOf(element);\n        rowBucket.splice(index, 1);\n\n        if (rowBucket.length === 0) {\n          btnEdit.disabled = true;\n          btnDelete.disabled = true;\n        }\n      }\n    });\n    CB.checked = false;\n  }\n} //---------------------------------------------------------------------------------------------------------------\n//\n\n\nfunction editMultiple() {\n  // const itemName = row.querySelector(\".td_Names\").innerText;\n  let row = rowBucket.pop();\n  let itemName = row.querySelector(\".td_Names\").innerText;\n  _controller_modals_ModalController__WEBPACK_IMPORTED_MODULE_0__[\"default\"].openItemForm(row, true).then(result => {\n    if (result[0] === \"edited\") {\n      // TableController.removeItem(itemName);\n      // TableController.\n      _Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1___default.a.showAlert(\"success\", `${itemName} Has Been Successfully Changed To ${result[1]}`);\n      row.querySelector(\".td_cb\").querySelector(\".selectOne\").checked = false;\n\n      if (rowBucket.length === 0) {\n        btnEdit.disabled = true;\n        btnDelete.disabled = true;\n      } else {\n        editMultiple();\n      }\n    }\n  }).catch(error => {\n    _Alerts_NotificationController__WEBPACK_IMPORTED_MODULE_1___default.a.showAlert(\"error\", error);\n  });\n}\n\n//# sourceURL=webpack:///./controller/InventoryController.js?");

/***/ }),

/***/ "./controller/modals/ModalController.js":
/*!**********************************************!*\
  !*** ./controller/modals/ModalController.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n\nconst TableController = __webpack_require__(/*! ../utilities/TableController */ \"./controller/utilities/TableController.js\");\n\nclass Modal {\n  static openPrompt(itemName, resolve, reject, justVerify = \"\") {\n    console.log(resolve, reject);\n    const boxTemplate = `\n                    <div class=\"dialogContainer fullwidth aDialog\" role=\"container\">\n                        <div class=\"dialogHeader\" role=\"header\">\n\n                            <img src=\"../Icons/Modals/question.svg\" alt=\"Confirmation Message\" />\n                            <img class=\"img_close\" src=\"../Icons/Modals/close.svg\" alt=\"Close Modal\" />\n\n                        </div>\n\n                        <div class=\"dialogBody fullwidth\" role=\"body\">\n                        <span>\n                                Please Enter Your Password To Continue\n                            </span>\n\n                            <input type=\"password\" class=\"modal_pass\" aria-placeholder=\"enter password here\" placeholder=\"Enter Your Password Here\" />\n\n                        </div>\n\n                        <div class=\"dialogFooter fullwidth\" role=\"footer\" aria-placeholder=\"Confirm here\">\n                            <div class=\"dialogConfirm\">\n                                Confirm\n                            </div>\n                        </div>\n\n                    </div>\n                `;\n    const promptBox = document.createElement('div');\n    promptBox.className = \"modal dialog--promptBox\";\n    promptBox.setAttribute(\"aria-placeholder\", \"Prompt Box\");\n    promptBox.innerHTML = boxTemplate;\n    const mainBodyContent = document.querySelector('.mainBody_content');\n    mainBodyContent.appendChild(promptBox); //Event Listener\n\n    promptBox.querySelector('.img_close').addEventListener(\"click\", () => {\n      closePromptBox(resolve, reject);\n    });\n    promptBox.querySelector('.dialogConfirm').addEventListener(\"click\", () => {\n      confirmRemove(itemName, resolve, reject, justVerify); //ItemName and Item are basically the same but kinda acts as flags to polymorphism of this function\n    });\n  } //Confirmation DialogBox\n\n\n  static openConfirmationBox(itemName, itemCount) {\n    return new Promise((resolve, reject) => {\n      const boxTemplate = `\n                <div class=\"dialogContainer fullwidth aDialog\" role=\"container\">\n                    <div class=\"dialogHeader\" role=\"header\">\n                        <img src=\"../Icons/Modals/question.svg\" alt=\"Confirmation Message\" />\n                        <img class=\"img_close\" src=\"../Icons/Modals/close.svg\" alt=\"Close Modal\" />\n                    </div>\n    \n                    <div class=\"dialogBody fullwidth\" role=\"body\">\n                       <span>\n                                Are You Sure You Want To Delete ${itemName} which has \n                                a quantity of (${itemCount}) from the Inventory.\n                        </span>\n    \n                    </div>\n    \n                    <div class=\"dialogFooter fullwidth\" role=\"footer\" aria-placeholder=\"Confirm here\">\n                        <div class=\"dialogConfirm\">\n                            Yes, Delete\n                        </div>\n                        <div class=\"dialogRevert\">\n                            Review Selection\n                        </div>\n                    </div>\n    \n                </div>\n            `;\n      const confirmationBox = document.createElement('div');\n      confirmationBox.className = \"modal dialog--confirmationBox\";\n      confirmationBox.setAttribute(\"aria-placeholder\", \"Confirm Box\");\n      confirmationBox.innerHTML = boxTemplate;\n      const mainBodyContent = document.querySelector('.mainBody_content');\n      mainBodyContent.appendChild(confirmationBox);\n      document.querySelector('.contentCover').classList.add('contentCover--shown');\n      setTimeout(() => {\n        mainBodyContent.querySelector(\".dialog--confirmationBox\").classList.add(\"dialog--confirmationBox--shown\");\n      }, 100); //Event Listener\n\n      confirmationBox.querySelector('.img_close').addEventListener(\"click\", () => closeConfirmationBox(resolve, reject));\n      confirmationBox.querySelector(\".dialogRevert\").addEventListener(\"click\", () => closeConfirmationBox(resolve, reject));\n      confirmationBox.querySelector(\".dialogConfirm\").addEventListener(\"click\", () => {\n        openPrompt(itemName, resolve, reject);\n      });\n    });\n  }\n\n  static openItemForm(row = \"\", editForm) {\n    return new Promise((resolve, reject) => {\n      let formTitle = editForm === true ? \"Edit Stock\" : \"New Stock\";\n      let itemName = \"\";\n      let brand = \"\";\n      let category = \"\";\n      let itemQuantity = \"\";\n      let sellingPrice = \"\";\n\n      if (row !== \"\") {\n        itemName = row.querySelector(\".td_Names\").innerText;\n        brand = row.querySelector(\".td_Brands\").innerText;\n        category = row.querySelector(\".td_Category\").innerText;\n        itemQuantity = row.querySelector(\".td_Stock\").innerText;\n        sellingPrice = row.querySelector(\".td_Price\").innerText;\n      }\n\n      const boxTemplate = `\n                <div class=\"dialogContainer fullwidth aDialog\" role=\"container\">\n                    <div class=\"dialogHeader\" role=\"header\">\n    \n                        ${formTitle}    \n    \n                        <img class=\"img_close\" src=\"../Icons/Modals/close.svg\" alt=\"Close Modal\" />\n    \n                    </div>\n    \n                    <form class=\"dialogBody fullwidth\" role=\"body\">\n    \n                            <input type=\"text\" class=\"dialogForm_tb fullwidth\" value=\"${itemName}\" aria-placeholder=\"Item Name\" placeholder=\"Item Name\" id=\"name\" />\n    \n                         <div class=\"flexContainer\">   \n                            <input type=\"text\" class=\"dialogForm_tb halfwidth\" value=\"${category}\" aria-placeholder=\"Item Category\" placeholder=\"Item Category\" id=\"category\" />\n    \n                            <input type=\"text\" class=\"dialogForm_tb halfwidth\" value=\"${brand}\" aria-placeholder=\"Item Brand\" placeholder=\"Item Brand\" id=\"brand\" />\n    \n                            <input type=\"number\" class=\"dialogForm_tb halfwidth\" value=\"${itemQuantity}\" aria-placeholder=\"Total in inventory\" placeholder=\"Total In Inventory\" id=\"total\" />\n    \n                            <input type=\"number\" class=\"dialogForm_tb halfwidth\" aria-placeholder=\"Cost Price\" placeholder=\"Cost Price\" id=\"costPrice\" />\n    \n                            <input type=\"number\" class=\"dialogForm_tb halfwidth\" value=\"${sellingPrice}\" aria-placeholder=\"Unit Cost\" placeholder=\"Selling Price\" id=\"sellingPrice\" />\n    \n                         </div>\n    \n                    </form>\n    \n                    <div class=\"dialogFooter fullwidth\" role=\"footer\" aria-placeholder=\"Confirm here\">\n                        <div class=\"dialogConfirm\">\n                            Save\n                            <img src=\"../Icons/Modals/add.svg\" alt=\"Confirmation Message\" />\n                        </div>\n                    </div>\n    \n                </div>\n            `;\n      const itemForm = document.createElement('div');\n      itemForm.className = \"modal dialog--itemFormBox\";\n      itemForm.classList.add(\"dialog--promptBox\");\n      itemForm.setAttribute(\"aria-placeholder\", \"Confirm Box\");\n      itemForm.innerHTML = boxTemplate;\n      const mainBodyContent = document.querySelector('.mainBody_content');\n      mainBodyContent.appendChild(itemForm);\n      document.querySelector('.contentCover').classList.add('contentCover--shown');\n      setTimeout(() => {\n        mainBodyContent.querySelector(\".dialog--itemFormBox\").classList.add(\"dialog--shown\");\n      }, 100); //Event Listeners\n\n      itemForm.querySelector('.img_close').addEventListener(\"click\", exitBox);\n      itemForm.querySelector('.dialogConfirm').addEventListener(\"click\", saveFormData);\n\n      function saveFormData() {\n        //Form Data\n        const name = itemForm.querySelector('#name').value;\n        const category = itemForm.querySelector('#category').value;\n        const brand = itemForm.querySelector('#brand').value;\n        const stock = itemForm.querySelector('#total').value;\n        const price = itemForm.querySelector('#sellingPrice').value;\n\n        if (name !== \"\" || category !== \"\" || brand !== \"\" || stock !== \"\" || price !== \"\") {\n          TableController.editItem(row, name, brand, category, stock, price);\n          closeModal(itemForm);\n          openPrompt(\"\", resolve, reject, [true, name]); // closeConfirmationBox(resolve, reject, true, name)                        \n        }\n      }\n\n      function exitBox() {\n        closeConfirmationBox(resolve, reject);\n      }\n    });\n  }\n\n} ///Event Listener Functions\n\n\nfunction closeConfirmationBox(resolve, reject, edited = \"\", name = \"\") {\n  if (mainBodyContent.querySelector('.modal') !== null) {\n    // document.querySelector(\".dialog--confirmationBox\").querySelector('.img_close').removeEventListener(\"click\",closeConfirmationBox)\n    // document.querySelector(\".dialog--confirmationBox\").querySelector(\".dialogRevert\").removeEventListener(\"click\",closeConfirmationBox)\n    mainBodyContent.querySelector('.modal').remove();\n    document.querySelector('.contentCover').classList.remove('contentCover--shown');\n\n    if (edited === true) {\n      resolve([\"edited\", name]);\n    } else {\n      resolve();\n    }\n  } else {\n    reject(new Error(\"Sorry, an error occured\"));\n  }\n} //For Confirmation Box\n\n\nfunction openPrompt(itemName, resolve, reject, justVerify) {\n  if (mainBodyContent.querySelector('.modal') !== null) {\n    //document.querySelector(\".dialog--confirmationBox\").querySelector('.img_close').removeEventListener(\"click\",closeConfirmationBox)\n    //document.querySelector(\".dialog--confirmationBox\").querySelector(\".dialogRevert\").removeEventListener(\"click\",closeConfirmationBox)\n    mainBodyContent.querySelector('.modal').remove();\n  }\n\n  Modal.openPrompt(itemName, resolve, reject, justVerify);\n} //For Prompt bOX\n\n\nfunction closePromptBox(resolve, reject) {\n  if (mainBodyContent.querySelector('.modal') !== null) {\n    mainBodyContent.querySelector('.modal').remove();\n    document.querySelector('.contentCover').classList.remove('contentCover--shown');\n    resolve();\n  }\n} // Validates password provided in prompt box and removes removes specified element\n\n\nfunction confirmRemove(itemName, resolve, reject, justVerify = \"\") {\n  const modal = mainBodyContent.querySelector('.modal');\n  const Password = document.querySelector('.dialog--promptBox').querySelector(\".modal_pass\").value;\n\n  if (Password === \"Samuel\") {\n    closeModal(modal);\n    document.querySelector('.contentCover').classList.remove('contentCover--shown');\n\n    if (justVerify[0] === true) {\n      resolve([\"edited\", justVerify[1]]);\n      return;\n    }\n\n    TableController.removeItem(itemName);\n    resolve(\"removed\");\n  } else {\n    reject(new Error(\"wrongPassword\"));\n    closeModal(modal);\n    document.querySelector('.contentCover').classList.remove('contentCover--shown');\n  }\n}\n\nfunction closeModal(modal) {\n  modal.classList.add('modal_hide');\n  setTimeout(() => {\n    modal.remove();\n  }, 400);\n}\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (Modal);\n\n//# sourceURL=webpack:///./controller/modals/ModalController.js?");

/***/ }),

/***/ "./controller/utilities/TableController.js":
/*!*************************************************!*\
  !*** ./controller/utilities/TableController.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nclass TableController {\n  static removeItem(itemName) {\n    itemName = itemName.toLowerCase();\n    const tableROWS = document.querySelector('.tableBody').querySelectorAll('.bodyRow');\n    tableROWS.forEach(row => {\n      const item = row.querySelector(\".td_Names\");\n\n      if (item !== null && item.innerText.toLowerCase() === itemName) {\n        row.style.transition = \".7s\";\n        row.style.transform = \"translateX(150%)\";\n        setTimeout(() => {\n          row.remove();\n        }, 500);\n      }\n    });\n  }\n\n  static editItem(row, name, brand, category, stock, price) {\n    row.querySelector('.td_Names').innerText = name;\n    row.querySelector('.td_Brands').innerText = brand;\n    row.querySelector('.td_Category').innerText = category;\n    row.querySelector('.td_Stock').innerText = stock;\n    row.querySelector('.td_Price').innerText = price;\n  }\n\n}\n\nmodule.exports = TableController;\n\n//# sourceURL=webpack:///./controller/utilities/TableController.js?");

/***/ })

/******/ });